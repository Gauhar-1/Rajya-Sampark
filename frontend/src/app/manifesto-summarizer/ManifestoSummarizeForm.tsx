'use client';

import { useState } from 'react';
import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Loader2, Sparkles } from 'lucide-react';
import { summarizeManifestoAction } from './actions';

const formSchema = z.object({
  manifesto: z.string().min(50, { message: 'Manifesto text must be at least 50 characters long.' }).max(10000, { message: 'Manifesto text cannot exceed 10,000 characters.' }),
});

type FormData = z.infer<typeof formSchema>;

export function ManifestoSummarizeForm() {
  const [summary, setSummary] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const { register, handleSubmit, formState: { errors } } = useForm<FormData>({
    resolver: zodResolver(formSchema),
  });

  const onSubmit: SubmitHandler<FormData> = async (data) => {
    setIsLoading(true);
    setSummary(null);
    setError(null);
    try {
      const result = await summarizeManifestoAction({ manifesto: data.manifesto });
      if (result.summary) {
        setSummary(result.summary);
      } else if (result.error) {
        setError(result.error);
      } else {
        setError('An unknown error occurred.');
      }
    } catch (e) {
      setError(e instanceof Error ? e.message : 'Failed to summarize manifesto.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="shadow-lg">
      <CardContent className="pt-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div>
            <Textarea
              {...register('manifesto')}
              placeholder="Paste the full manifesto text here..."
              className="min-h-[200px] text-sm"
              aria-label="Manifesto text input"
              aria-describedby="manifesto-error"
            />
            {errors.manifesto && <p id="manifesto-error" className="text-sm text-destructive mt-1">{errors.manifesto.message}</p>}
          </div>
          <Button type="submit" disabled={isLoading} className="w-full bg-accent text-accent-foreground hover:bg-accent/90">
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Summarizing...
              </>
            ) : (
              <>
                <Sparkles className="mr-2 h-4 w-4" />
                Generate Summary
              </>
            )}
          </Button>
        </form>

        {error && (
          <Alert variant="destructive" className="mt-6">
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {summary && (
          <Card className="mt-6 bg-secondary/50">
            <CardHeader>
              <CardTitle className="text-lg flex items-center">
                <Sparkles className="mr-2 h-5 w-5 text-primary" />
                AI-Generated Summary
              </CardTitle>
              <CardDescription>This summary was generated by our AI assistant.</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm whitespace-pre-wrap">{summary}</p>
            </CardContent>
          </Card>
        )}
      </CardContent>
    </Card>
  );
}
